{{/* Base template */}}
{{define "title"}}3D Flight Globe{{end}}

{{define "head_extra"}}
  <style> body { margin: 0; } </style>
  <script type="importmap">{
    "imports": {
      "three": "https://esm.sh/three",
      "three/": "https://esm.sh/three/"
    }
  }</script>
{{end}}

{{define "content"}}
  <div id="globeViz"></div>

  {{/* The main module script. Go's html/template is context-aware and safe for script tags. */}}
  <script type="module">
    import ThreeGlobe from 'https://esm.sh/three-globe?external=three';
    import * as THREE from 'https://esm.sh/three';
    import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js?external=three';


    function createParticleTexture(color = 'rgb(255, 255, 255, 0.5)', size = 32) {
      const canvas = document.createElement('canvas');
      canvas.width = size;
      canvas.height = size;
      const context = canvas.getContext('2d');
      const centerX = size / 2;
      const centerY = size / 2;
      const radius = size / 2;

      context.beginPath();
      context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
      context.fillStyle = color;
      context.fill();

      const texture = new THREE.CanvasTexture(canvas);
      texture.needsUpdate = true; // Ensure texture updates
      return texture;
    }

    // Create the texture once
    const particleTexture = createParticleTexture('rgb(255, 200, 0, 0.5)' , 64); // Yellowish, s

    const Globe = new ThreeGlobe()
      .globeTileEngineUrl((x, y, z) =>
        // Use backticks or escape the $ if needed, but should be fine here.
        `https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/${z}/${y}/${x}`
      ).particleLat('lat')
      .particleLng('lng')
      .particleAltitude('alt')
      //.particlesTexture(() => particleTexture)
      .particlesSize(() => 0.15) 
      .pathPoints(p => p.map(pt => [pt.lat, pt.lng, pt.altitude]))
      .pathColor(() => 'white')
      .pathStroke(2)
      .pathDashLength(0)
      .pathTransitionDuration(0)
      .pathResolution(0.1)
      ;

      try {
        // Traverse the Globe object itself (assuming it's the THREE.Group)
        Globe.traverse(object => {
            // Find the Points object used for particles
            if (object.isPoints) {
                console.log("Found Points object, modifying material for transparency.");
                const material = object.material;
                if (material) {
                    material.transparent = true;  // Enable transparency
                    material.depthWrite = false; // Disable writing to depth buffer for proper blending
                    material.alphaTest = 0;     // Disable alpha testing (rely on blending)
                    // Optional: Ensure blending mode is suitable if needed
                    // material.blending = THREE.NormalBlending;
                    material.needsUpdate = true; // Signal material change
                } else {
                   console.warn("Points object found, but has no material.");
                }
            }
        });
    } catch (e) {
        console.error("Error traversing Globe object or modifying material:", e);
    }

    const R = Globe.getGlobeRadius();

    // Setup renderer
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      logarithmicDepthBuffer: true
    });
    renderer.sortObjects = true;
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    document.getElementById('globeViz').appendChild(renderer.domElement);

    // Setup scene
    const scene = new THREE.Scene();
    scene.add(Globe);
    scene.add(new THREE.AmbientLight(0xcccccc, Math.PI));
    scene.add(new THREE.DirectionalLight(0xffffff, 0.6 * Math.PI));

    // Setup camera
    const camera = new THREE.PerspectiveCamera();
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.near = 1e-3;
    camera.far = R * 100;
    camera.updateProjectionMatrix();
    camera.position.z = 600;

    // Add camera controls
    const tbControls = new TrackballControls(camera, renderer.domElement);
    tbControls.minDistance = R * (1 + 5 / 2**Globe.globeTileEngineMaxLevel());
    tbControls.maxDistance = camera.far - R;
    tbControls.rotateSpeed = 5;
    tbControls.zoomSpeed = 0.8;

    // Update pov when camera moves
    Globe.setPointOfView(camera);
    tbControls.addEventListener('change', () => {
      Globe.setPointOfView(camera);
      const distToSurface = camera.position.distanceTo(Globe.position) - R;
      tbControls.rotateSpeed = distToSurface / R * 2.5;
      tbControls.zoomSpeed = Math.sqrt(distToSurface / R) * 0.5;
    });

    // Kick-off renderer
    (function animate() { // IIFE
      // Frame cycle
      tbControls.update();
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    })();

    // TODO: Fetch data from /api/v1/telemetry and add points/arcs to the Globe
    async function updateFlights() {
        try {
            const response = await fetch('/api/v1/telemetry'); // Fetches the flat array of all telemetry points
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            // flatTelemetryData is an array like: [{icao24: 'abc', Latitude: ..., Longitude: ..., ...}, {icao24: 'def', ...}, {icao24: 'abc', ...}]
            const flatTelemetryData = await response.json();

            // --- Group Telemetry Data by ICAO24 on the Frontend ---
            const flightsGrouped = {}; // Use an object for efficient grouping

            flatTelemetryData.forEach(point => {
                const icao = point.ICAO24;
                if (!icao || point.Latitude == null || point.Longitude == null) return; // Skip points without ICAO or essential coords

                if (!flightsGrouped[icao]) {
                    flightsGrouped[icao] = {
                        icao24: icao,
                        callsign: point.Callsign, // Store callsign if needed
                        origin_country: point.OriginCountry, // Store other static data if needed
                        history: []
                    };
                }

                // Convert timestamp string to Unix timestamp (seconds) for sorting
                const timestamp = point.LastContact ? new Date(point.LastContact).getTime() / 1000 : 0;

                const relativeAltitude = (point.BaroAltitude || point.GeoAltitude || 0) / 6378000;

                // Add the point to the history for this flight
                flightsGrouped[icao].history.push({
                    latitude: point.Latitude,    // Corrected typo: latitude
                    longitude: point.Longitude,  // Corrected typo: longitude
                    relativeAltitude: relativeAltitude, // Use calculated relative altitude
                    timestamp: timestamp,        // Store the NUMERIC timestamp for sorting
                    // Include other point-specific data if needed later
                });
            });

            // Convert the grouped object back into an array (the format expected by subsequent logic)
            const flightsWithHistory = Object.values(flightsGrouped);

            // --- Process data for Paths (Historical Tracks) ---
            const pathsData = flightsWithHistory
                .map(flight => {
                    // Ensure history is sorted by timestamp
                    const sortedHistory = flight.history.sort((a, b) => a.timestamp - b.timestamp);

                    // Filter out flights with less than 2 points AFTER sorting
                    if (sortedHistory.length < 2) {
                        return null; // Will be filtered out later
                    }

                    // Map history points to {lat, lng, alt} objects for the path
                    return sortedHistory.map(point => ({
                        lat: point.latitude,          // Use correct field name
                        lng: point.longitude,         // Use correct field name
                        alt: point.relativeAltitude   // Corrected typo: Use relativeAltitude
                    }));
                })
                .filter(path => path !== null); // Remove null entries from flights with < 2 points

            // --- Process data for Particles (Latest Position) ---
            const particlesData = flightsWithHistory
                .map(flight => {
                    const sortedHistory = flight.history.sort((a, b) => a.timestamp - b.timestamp);
                    if (sortedHistory.length === 0) return null;
                    
                    const latestPoint = sortedHistory[sortedHistory.length - 1];
                    
                    // Validate coordinates to prevent NaN values
                    if (isNaN(latestPoint.latitude) || isNaN(latestPoint.longitude) || isNaN(latestPoint.relativeAltitude)) {
                        return null;
                    }
                    
                    return {
                        lat: latestPoint.latitude,
                        lng: latestPoint.longitude,
                        alt: latestPoint.relativeAltitude
                    };
                })
                .filter(particle => particle !== null);


            // --- Update Globe ---
            // Update Paths
            if (pathsData.length === 0) {
                console.log("No path data to update.");
                // Globe.pathsData([]); // Optionally clear existing paths
            } else {
                console.log(`Updating globe with ${pathsData.length} paths.`);
                // Log the pathsData content here:
                console.log('Paths Data:', JSON.stringify(pathsData.slice(0,20), null, 2)); // Pretty-print JSON
                // console.log('Paths Data (raw object):', pathsData); // Alternative: log raw object

                Globe.pathsData(pathsData); // Update only once
            }

            // Update Particles
            if (particlesData.length === 0) {
                 console.log("No particle data to update.");
                // Globe.particlesData([]); // Optionally clear existing particles
            } else {
                 console.log(`Updating globe with ${particlesData.length} current aircraft particles.`);
                // console.log('Particles data sample:', JSON.stringify(particlesData.slice(0, 5), null, 2));
                Globe.particlesData(particlesData.length > 0 ? [particlesData] : []); // Update only once
            }

        } catch (error) {
            console.error("Failed to fetch or update flight data:", error);
        }
    }

    // Initial load and periodic update
    updateFlights();
    setInterval(updateFlights, 15000); // Update every 15 seconds

  </script>
{{end}}

